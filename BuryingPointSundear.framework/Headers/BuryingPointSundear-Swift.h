// Generated by Apple Swift version 5.3 effective-4.2 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
#ifndef BURYINGPOINTSUNDEAR_SWIFT_H
#define BURYINGPOINTSUNDEAR_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import CoreLocation;
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="BuryingPointSundear",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@protocol Logger;
@class CLLocationManager;
@class CLLocation;

/// The BuryingPoint Tracker is a Swift framework to send analytics to the BuryingPoint server.  BuryingPoint Tracker是一个快速框架，用于将分析发送到BuryingPoint服务器。
/// <h2>Basic Usage  基本用法</h2>
/// <ul>
///   <li>
///     Use the track methods to track your views, events and more.  使用跟踪方法跟踪您的视图，事件等。
///   </li>
/// </ul>
SWIFT_CLASS("_TtC19BuryingPointSundear19BuryingPointSundear")
@interface BuryingPointSundear : NSObject <CLLocationManagerDelegate>
/// Defines if the user opted out of tracking. When set to true, every event  定义用户是否选择退出跟踪。设置为true时，每个事件
/// will be discarded immediately. This property is persisted between app launches.  将立即丢弃。此属性在应用程序启动之间持续存在。
@property (nonatomic) BOOL isOptedOut;
/// Will be used to associate all future events with a given userID. This property   将用于将所有未来事件与给定的用户名相关联。这个属性
/// is persisted between app launches.    在应用程序发布之间持续存在。
@property (nonatomic, copy) NSString * _Nullable userId;
@property (nonatomic, copy) NSString * _Nullable visitorId SWIFT_DEPRECATED_MSG("use userId instead");
/// Will be used to associate all future events with a given visitorId / cid. This property  将用于将所有未来事件与给定的访问/cid相关联。这个属性
/// is persisted between app launches. 在应用程序发布之间持续存在
/// The <code>forcedVisitorId</code> can only be a 16 character long hexadecimal string. Setting an invalid  `forcedVisitorId’’只能是16个字符长的十六位小数字符串。设置无效
/// string will have no effect.  字符串将无效。
@property (nonatomic, copy) NSString * _Nullable forcedVisitorId;
/// This logger is used to perform logging of all sorts of BuryingPoint related information.该记录器用于执行各种埋藏点相关信息的记录。
/// Per default it is a <code>DefaultLogger</code> with a <code>minLevel</code> of <code>LogLevel.warning</code>. You can   按照默认值，它是一个“默认记录器”，其“minLevel”为<code>LogLevel.warning</code>. 你可以
/// set your own Logger with a custom <code>minLevel</code> or a complete custom logging mechanism.  使用自定义的“minLevel”或完整的自定义日志记录机制设置自己的记录器
@property (nonatomic, strong) id <Logger> _Nonnull logger;
/// The <code>contentBase</code> is used to build the url of an Event, if the Event hasn’t got a url set.如果事件没有url集，“contentBase”用于构建事件的url。
/// This autogenerated url will then have the format <contentBase>/<actions>.然后，此自动生成的url将具有格式<contentBase>/<actions>。
/// Per default the <code>contentBase</code> is http://<Application Bundle Name>. 默认情况下，“contentBase”是http://<Application Bundle Name>。
/// Set the <code>contentBase</code> to nil, if you don’t want to auto generate a url.  /如果您不想自动生成url，请将“contentBase”设置为零。
@property (nonatomic, copy) NSURL * _Nullable contentBase;
/// Create and Configure a new Tracker  创建和配置新的跟踪器
/// A volatile memory queue will be used to store the analytics data. All not transmitted data will be lost when the application gets terminated.易失记忆队列将用于存储分析数据。当应用程序终止时，所有未传输的数据都将丢失。
/// The URLSessionDispatcher will be used to transmit the data to the server.URLSessionDispatcher将用于将数据传输到服务器。
/// \param siteId The unique site id generated by the server when a new site was created.创建新站点时由服务器生成的唯一站点id。
///
/// \param baseURL The url of the BuryingPoint server. This url has to end in <code>sundear.php</code> or <code>buryingPoint.php</code>. BuryingPoint服务器的url。此url必须以<code>sundear.php</code>或者<code>buryingPoint.php</code>.
///
/// \param userAgent An optional parameter for custom user agent.自定义用户代理的可选参数。
///
- (nonnull instancetype)initWithSiteId:(NSString * _Nonnull)siteId baseURL:(NSURL * _Nonnull)baseURL userAgent:(NSString * _Nullable)userAgent;
@property (nonatomic) NSInteger flushBulkSize;
/// 初始化系统的一些方法
- (void)deviceAndApplication;
/// 输入用户的手机号
- (void)BuryingPointPhoneNumberWithPhoneNumber:(NSString * _Nonnull)phoneNumber;
/// 进入界面
/// entryIdaction :第一个操作界面 。如果没有，写当前界面名称
/// exitIdaction:上个界面。 如果没有，写当前界面名称
/// nowIdactionName:进入界面的名称
- (void)BuryingPoinStartVisitIdactionWithEntryIdaction:(NSString * _Nonnull)entryIdaction exitIdaction:(NSString * _Nonnull)exitIdaction nowIdactionName:(NSString * _Nonnull)nowIdactionName;
/// 退出界面
/// entryIdaction :第一个操作界面 。如果没有，写当前界面名称
/// exitIdaction:上个界面。 如果没有，写当前界面名称
/// nowIdactionName:进入界面的名称
- (void)BuryingPoinEndVisitIdactionWithEntryIdaction:(NSString * _Nonnull)entryIdaction exitIdaction:(NSString * _Nonnull)exitIdaction nowIdactionName:(NSString * _Nonnull)nowIdactionName;
/// 手势：滑动和缩小或者放大
/// 左滑 0   右滑 1   上滑 2    下滑 3    左右滑4   上下滑 5  滑动 6    缩小 7    放大 8     缩放 9
- (void)BuryingPoingestureWithGesture:(NSInteger)gesture;
- (void)obtainLocation;
- (void)locationManager:(CLLocationManager * _Nonnull)manager didUpdateLocations:(NSArray<CLLocation *> * _Nonnull)locations;
/// Manually start the dispatching process. You might want to call this method in AppDelegates <code>applicationDidEnterBackground</code> to transmit all data 手动启动调度过程。您可能想在appdelicates`applicationdifferbackground’中调用此方法来传输所有数据
/// whenever the user leaves the application.每当用户离开应用程序时。
- (void)dispatch;
@property (nonatomic) NSTimeInterval dispatchInterval;
/// Adds the name and keyword for the current campaign. 为当前活动添加名称和关键字。
/// This is usually very helpfull if you use deeplinks into your app.  如果您在应用程序中使用deeplinks，这通常非常有用。
/// More information on campaigns: <a href="https://buryingPoint.org/docs/tracking-campaigns/">https://buryingPoint.org/docs/tracking-campaigns/</a>
/// \param name The name of the campaign. 活动名称。
///
/// \param keyword The keyword of the campaign.  活动的关键字。
///
- (void)trackCampaignWithName:(NSString * _Nullable)name keyword:(NSString * _Nullable)keyword;
/// There are several ways to track content impressions and interactions manually, semi-automatically and automatically. Please be aware that content impressions will be tracked using bulk tracking which will always send a POST request, even if  GET is configured which is the default. For more details have a look at the in-depth guide to Content Tracking. 有几种方法可以手动，半自动和自动跟踪内容印象和交互。请注意，内容印象将使用批量跟踪进行跟踪，即使GET配置为默认值，它也会始终发送帖子请求。有关更多详细信息，请参阅内容跟踪的深入指南。
/// More information on content: <a href="https://buryingPoint.org/docs/content-tracking/">https://buryingPoint.org/docs/content-tracking/</a>
/// \param name The name of the content. For instance ‘Ad Foo Bar’  内容的名称。例如’Ad Foo Bar’
///
/// \param piece The actual content piece. For instance the path to an image, video, audio, any text   实际内容片段。例如，图像，视频，音频，任何文本的路径
///
/// \param target The target of the content. For instance the URL of a landing page  内容的目标。例如着陆页的URL
///
/// \param interaction The name of the interaction with the content. For instance a ‘click’  与内容交互的名称。例如，“点击”
///
- (void)trackContentImpressionWithName:(NSString * _Nonnull)name piece:(NSString * _Nullable)piece target:(NSString * _Nullable)target;
- (void)trackContentInteractionWithName:(NSString * _Nonnull)name interaction:(NSString * _Nonnull)interaction piece:(NSString * _Nullable)piece target:(NSString * _Nullable)target;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


@interface BuryingPointSundear (SWIFT_EXTENSION(BuryingPointSundear))
- (void)copyFromOldSharedInstance;
@end




@interface BuryingPointSundear (SWIFT_EXTENSION(BuryingPointSundear))
/// The version of the BuryingPoint SDKs  BuryingPoint SDKs的版本
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sdkVersion;)
+ (NSString * _Nonnull)sdkVersion SWIFT_WARN_UNUSED_RESULT;
@end


@interface BuryingPointSundear (SWIFT_EXTENSION(BuryingPointSundear))
/// Set a permanent new Custom Variable.  /设置一个永久的新自定义变量。
/// 使用此方法时需要注意，下标0-6是获取系统方法，禁止使用，否则引起方法覆盖
/// \param name The index of the new Custom Variable  新自定义变量的索引
///
/// \param name The name of the new Custom Variable   新自定义变量的名称
///
/// \param value The value of the new Custom Variable   新自定义变量的值
///
- (void)setCustomVariableWithIndex:(NSUInteger)index name:(NSString * _Nonnull)name value:(NSString * _Nonnull)value;
/// Remove a previously set Custom Variable. 删除先前设置的自定义变量。
/// \param index The index of the Custom Variable 自定义变量的索引
///
- (void)removeCustomVariableWithIndex:(NSUInteger)index;
@end

@class NSNumber;

@interface BuryingPointSundear (SWIFT_EXTENSION(BuryingPointSundear))
- (void)trackWithView:(NSArray<NSString *> * _Nonnull)view url:(NSURL * _Nullable)url;
- (void)trackWithEventWithCategory:(NSString * _Nonnull)category action:(NSString * _Nonnull)action name:(NSString * _Nullable)name number:(NSNumber * _Nullable)number url:(NSURL * _Nullable)url;
- (void)trackWithEventWithCategory:(NSString * _Nonnull)category action:(NSString * _Nonnull)action name:(NSString * _Nullable)name number:(NSNumber * _Nullable)number SWIFT_DEPRECATED_MSG("use trackEventWithCategory:action:name:number:url instead");
- (void)trackSearchWithQuery:(NSString * _Nonnull)query category:(NSString * _Nullable)category resultCount:(NSInteger)resultCount url:(NSURL * _Nullable)url;
@end


@interface BuryingPointSundear (SWIFT_EXTENSION(BuryingPointSundear))
/// Set a permanent custom dimension by value and index.  按值和索引设置永久自定义维度。
/// This is a convenience alternative to set(dimension:) and calls the exact same functionality. Also, it is accessible from Objective-C.
/// 这是设置（维度：）的便利替代方案，并调用完全相同的功能。此外，它可以从客观C获得。
/// \param value The value for the new Custom Dimension  新自定义维度的值
///
/// \param forIndex The index of the new Custom Dimension  新自定义维度的索引
///
- (void)setDimension:(NSString * _Nonnull)value forIndex:(NSInteger)index;
/// Removes a previously set custom dimension.   删除先前设置的自定义维度。
/// Use this method to remove a dimension that was set using the <code>set(value: String, forDimension index: Int)</code> method.
/// 使用此方法删除使用“set（value:String，forDimension index:Int）”方法设置的维度。
/// \param index The index of the dimension.   维度的索引。
///
- (void)removeWithDimensionAtIndex:(NSInteger)index;
@end




enum LogLevel : NSInteger;

/// The Logger protocol defines a common interface that is used to log every message from the sdk. 记录器协议定义了一个公共接口，用于记录sdk中的每条消息。
/// You can easily writer your own to perform custom logging.   /您可以轻松编写自己的文件来执行自定义日志记录。
SWIFT_PROTOCOL("_TtP19BuryingPointSundear6Logger_")
@protocol Logger
/// This method should perform the logging. It can be called from every thread. The implementation has此方法应执行日志记录。它可以从每个线程调用。实施已经
/// to handle synchronizing different threads.处理同步不同的线程。
/// \param message A closure that produces the message itself. 生成消息本身的闭包。
///
/// \param level The loglevel of the message.消息的日志级别。
///
/// \param file The filename where the log was created.创建日志的文件名
///
/// \param function The funciton where the log was created.创建日志的函数。
///
/// \param line Then line where the log was created. 然后创建日志的行。
///
- (void)log:(SWIFT_NOESCAPE NSString * _Nonnull (^ _Nonnull)(void))message with:(enum LogLevel)level file:(NSString * _Nonnull)file function:(NSString * _Nonnull)function line:(NSInteger)line;
@end


/// This Logger loggs every message to the console with a <code>print</code> statement.  该记录器使用<code>print</code>语句将每条消息记录到控制台。
SWIFT_CLASS("_TtC19BuryingPointSundear13DefaultLogger")
@interface DefaultLogger : NSObject <Logger>
- (nonnull instancetype)initWithMinLevel:(enum LogLevel)minLevel OBJC_DESIGNATED_INITIALIZER;
- (void)log:(SWIFT_NOESCAPE NSString * _Nonnull (^ _Nonnull)(void))message with:(enum LogLevel)level file:(NSString * _Nonnull)file function:(NSString * _Nonnull)function line:(NSInteger)line;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC19BuryingPointSundear6Device")
@interface Device : NSObject
/// Creates an returns a new device object representing the current device 创建一个返回表示当前设备的新设备对象
+ (Device * _Nonnull)makeCurrentDevice SWIFT_WARN_UNUSED_RESULT;
/// The platform name of the device i.e. “iPhone1,1” or “iPad3,6”  设备的平台名称，即“iPhone1,1”或“iPad3,6”
@property (nonatomic, readonly, copy) NSString * _Nonnull platform;
@property (nonatomic, readonly, copy) NSString * _Nonnull operatingSystem;
/// The version number of the OS as String i.e. “1.2” or “9.4”  操作系统的版本号为字符串，即“1.2”或“9.4”
@property (nonatomic, readonly, copy) NSString * _Nonnull osVersion;
/// The screen size  屏幕大小
@property (nonatomic, readonly) CGSize screenSize;
/// The native screen size  原生屏幕大小
/// Will be CGSize.zero if the value is not defined on the running platorm.  将会CGSize.zero如果该值未在运行平台上定义。
@property (nonatomic, readonly) CGSize nativeScreenSize;
/// The darwin version as fetched from utsname()  版本取自utsname（）
@property (nonatomic, readonly, copy) NSString * _Nullable darwinVersion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end




typedef SWIFT_ENUM(NSInteger, LogLevel, closed) {
  LogLevelVerbose = 10,
  LogLevelDebug = 20,
  LogLevelInfo = 30,
  LogLevelWarning = 40,
  LogLevelError = 50,
};



/// The MemoryQueue is a <em>not thread safe</em> in memory Queue.  存储器队列是存储器队列中的<em>非线程安全</em>。
SWIFT_CLASS("_TtC19BuryingPointSundear11MemoryQueue")
@interface MemoryQueue : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC19BuryingPointSundear17UserDefaultsQueue")
@interface UserDefaultsQueue : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif
